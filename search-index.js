var searchIndex = JSON.parse('{\
"evercrypt":{"doc":"","i":[[0,"aead","evercrypt","Authenticated Encryption with Associated Data (AEAD)",null,null],[4,"Mode","evercrypt::aead","The AEAD Mode.",null,null],[13,"Aes128Gcm","","",0,null],[13,"Aes256Gcm","","",0,null],[13,"Chacha20Poly1305","","",0,null],[5,"key_size","","Get the key size of the <code>Mode</code> in bytes.",null,[[["mode",4]]]],[5,"tag_size","","Get the tag size of the <code>Mode</code> in bytes.",null,[[["mode",4]]]],[4,"Error","","",null,null],[13,"InvalidInit","","",1,null],[13,"InvalidAlgorithm","","",1,null],[13,"InvalidCiphertext","","",1,null],[13,"InvalidNonce","","",1,null],[13,"UnsupportedConfig","","",1,null],[13,"Encrypting","","",1,null],[13,"Decrypting","","",1,null],[13,"InvalidKeySize","","",1,null],[3,"Aead","","The Aead struct allows to re-use a key without having to …",null,null],[6,"Ciphertext","","Ciphertexts are byte vectors.",null,null],[6,"Tag","","Tags are 16-byte arrays.",null,null],[6,"Nonce","","Nonces are 12-byte arrays.",null,null],[6,"Aad","","Associated data are byte arrays.",null,null],[11,"new","","Create a new Aead cipher with the given Mode <code>alg</code> and key <code>k</code>…",2,[[["mode",4]],[["error",4],["result",4]]]],[11,"key_gen","","Generate a random key.",2,[[["mode",4]],["vec",3]]],[11,"nonce_gen","","Generate a nonce.",2,[[],["nonce",6]]],[11,"encrypt","","Encrypt with the algorithm and key of this Aead. Returns …",2,[[["nonce",6],["aad",6]],[["error",4],["result",4]]]],[11,"decrypt","","Decrypt with the algorithm and key of this Aead. Returns …",2,[[["nonce",6],["aad",6]],[["vec",3],["error",4],["result",4]]]],[5,"encrypt","","Single-shot API for AEAD encryption.",null,[[["nonce",6],["mode",4],["aad",6]],[["error",4],["result",4]]]],[5,"decrypt","","Single-shot API for AEAD decryption.",null,[[["nonce",6],["mode",4],["aad",6]],[["vec",3],["error",4],["result",4]]]],[5,"key_gen","","Generate a random key.",null,[[["mode",4]],["vec",3]]],[5,"nonce_gen","","Generate a nonce.",null,[[["mode",4]],["nonce",6]]],[0,"digest","evercrypt","Hashing",null,null],[4,"Error","evercrypt::digest","",null,null],[13,"InvalidStateFinished","","",3,null],[13,"ModeUnsupportedForStreaming","","",3,null],[4,"Mode","","The Digest Mode.",null,null],[13,"Sha1","","",4,null],[13,"Sha224","","",4,null],[13,"Sha256","","",4,null],[13,"Sha384","","",4,null],[13,"Sha512","","",4,null],[13,"Blake2s","","",4,null],[13,"Blake2b","","",4,null],[13,"Sha3_224","","",4,null],[13,"Sha3_256","","",4,null],[13,"Sha3_384","","",4,null],[13,"Sha3_512","","",4,null],[5,"get_digest_size","","Returns the output size of a digest.",null,[[["mode",4]]]],[3,"Digest","","The digest struct for stateful hashing.",null,null],[11,"new","","Create a new digest for the given mode <code>alg</code>.",5,[[["mode",4]],[["error",4],["result",4]]]],[11,"update","","Update the hash state. Modifies <code>self</code> and doesn\'t return …",5,[[],[["error",4],["result",4]]]],[11,"finish","","Finish the hash computation. Returns the digest or an …",5,[[],[["vec",3],["error",4],["result",4]]]],[5,"sha1","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha224","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha256","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha384","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha512","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha3_224","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha3_256","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha3_384","","Single-shot API with a fixed length output.",null,[[]]],[5,"sha3_512","","Single-shot API with a fixed length output.",null,[[]]],[5,"blake2s","","Single-shot API with a fixed length output.",null,[[]]],[5,"blake2b","","Single-shot API with a fixed length output.",null,[[]]],[5,"hash","","Create the digest for the given <code>data</code> and mode <code>alg</code>. The …",null,[[["mode",4]],["vec",3]]],[5,"shake128","","SHAKE 128",null,[[],["vec",3]]],[5,"shake256","","SHAKE 256",null,[[],["vec",3]]],[0,"ecdh","evercrypt","ECDH",null,null],[4,"Error","evercrypt::ecdh","",null,null],[13,"InvalidPoint","","",6,null],[13,"InvalidScalar","","",6,null],[13,"UnknownAlgorithm","","",6,null],[4,"Mode","","ECDH algorithm.",null,null],[13,"X25519","","",7,null],[13,"P256","","",7,null],[5,"derive","","Derive the ECDH shared secret. Returns <code>Ok(p * s)</code> on the …",null,[[["mode",4]],[["vec",3],["result",4],["error",4]]]],[5,"derive_base","","Returns <code>Ok(base_point * s)</code> on the provided curve (<code>mode</code>) …",null,[[["mode",4]],[["vec",3],["result",4],["error",4]]]],[5,"key_gen","","Generate a random <code>Scalar</code> on the given curve.",null,[[["mode",4]],["vec",3]]],[0,"ed25519","evercrypt","Ed25519",null,null],[4,"Error","evercrypt::ed25519","",null,null],[13,"InvalidPoint","","",8,null],[6,"Point","","Points are 32 byte arrays.",null,null],[6,"Scalar","","Scalars are 32 byte arrays.",null,null],[6,"Signature","","Signatures are 64 byte arrays.",null,null],[5,"eddsa_sign","","Sign message <code>msg</code> with secret key <code>sk</code>. Returns a <code>Signature</code>.",null,[[["scalar",6]],["signature",6]]],[5,"eddsa_verify","","Verify signature <code>signature</code> on message <code>msg</code> with public key …",null,[[["point",6],["signature",6]]]],[5,"sk2pk","","Compute the public <code>Point</code> for the given secret key <code>sk</code>.",null,[[["scalar",6]],["point",6]]],[5,"key_gen","","Generate a random <code>Scalar</code>.",null,[[],["scalar",6]]],[0,"hkdf","evercrypt","HKDF",null,null],[5,"extract","evercrypt::hkdf","HKDF extract using hash function <code>mode</code>, <code>salt</code>, and the …",null,[[["mode",4]],["vec",3]]],[5,"expand","","HKDF expand using hash function <code>mode</code>, pre-key material <code>prk</code>…",null,[[["mode",4]],["vec",3]]],[5,"hkdf","","HKDF using hash function <code>mode</code>, <code>salt</code>, input key material …",null,[[["mode",4]],["vec",3]]],[0,"hmac","evercrypt","HMAC",null,null],[4,"Mode","evercrypt::hmac","The HMAC mode defining the used hash function.",null,null],[13,"Sha1","","",9,null],[13,"Sha256","","",9,null],[13,"Sha384","","",9,null],[13,"Sha512","","",9,null],[5,"get_tag_size","","Get the tag size for a given mode.",null,[[["mode",4]]]],[5,"hmac","","Compute the HMAC value with the given <code>mode</code> and <code>key</code> on <code>data</code>…",null,[[["option",4],["mode",4]],["vec",3]]],[0,"p256","evercrypt","",null,null],[4,"Error","evercrypt::p256","",null,null],[13,"InvalidPoint","","",10,null],[13,"InvalidScalar","","",10,null],[13,"CompressedPoint","","",10,null],[13,"InvalidConfig","","",10,null],[13,"SigningFailed","","",10,null],[13,"InvalidSignature","","",10,null],[5,"validate_pk","","",null,[[],[["result",4],["error",4]]]],[5,"validate_sk","","Validate a P256 secret key.",null,[[],[["error",4],["scalar",6],["result",4]]]],[5,"dh_base","","Return base * s",null,[[],[["result",4],["error",4]]]],[5,"dh","","Return p * s",null,[[],[["result",4],["error",4]]]],[6,"Nonce","","Nonces are 32 byte arrays.",null,null],[6,"Scalar","","Scalars are 32 byte arrays.",null,null],[3,"Signature","","An ECDSA signature holding <code>r</code> and <code>s</code>.",null,null],[11,"new","","Build a new signature from <code>r</code> and <code>s</code>.",11,[[]]],[11,"from_bytes","","Generate a new signature from a byte array holding <code>r||s</code>.",11,[[]]],[11,"raw","","Get the raw signature bytes. Returns a 64 byte array …",11,[[]]],[5,"ecdsa_sign","","Sign <code>msg</code> with <code>sk</code> and <code>nonce</code> using <code>hash</code> with EcDSA on P256.",null,[[["mode",4],["scalar",6],["nonce",6]],[["signature",3],["error",4],["result",4]]]],[5,"ecdsa_verify","","Verify EcDSA <code>signature</code> over P256 on <code>msg</code> with <code>pk</code> using <code>hash</code>…",null,[[["mode",4],["signature",3]],[["error",4],["result",4]]]],[5,"random_nonce","","Generate a random nonce for ECDSA.",null,[[],["nonce",6]]],[5,"key_gen","","Generate a new P256 scalar (private key).",null,[[],["scalar",6]]],[0,"signature","evercrypt","",null,null],[4,"Error","evercrypt::signature","",null,null],[13,"InvalidPoint","","",12,null],[13,"UnknownAlgorithm","","",12,null],[13,"NonceMissing","","",12,null],[13,"HashAlgorithmMissing","","",12,null],[13,"InvalidSignature","","",12,null],[4,"Mode","","",null,null],[13,"Ed25519","","",13,null],[13,"P256","","",13,null],[5,"key_gen","","Generate a new key pair for the given <code>mode</code>.",null,[[["mode",4]],[["error",4],["result",4]]]],[5,"sign","","",null,[[["nonce",6],["option",4],["option",4],["mode",4],["mode",4]],[["vec",3],["error",4],["result",4]]]],[5,"verify","","",null,[[["option",4],["mode",4],["mode",4]],[["error",4],["result",4]]]],[0,"x25519","evercrypt","x25519",null,null],[4,"Error","evercrypt::x25519","",null,null],[13,"InvalidPoint","","",14,null],[6,"Point","","Points are 32 byte arrays.",null,null],[6,"Scalar","","Scalars are 32 byte arrays.",null,null],[5,"dh_base","","Return base * s",null,[[["scalar",6]],["point",6]]],[5,"dh","","Return p * s",null,[[["scalar",6],["point",6]],[["point",6],["error",4],["result",4]]]],[5,"key_gen","","Generate a random <code>Scalar</code>.",null,[[],["scalar",6]]],[0,"rand_util","evercrypt","Utilities that provide randomness. Note that this …",null,null],[5,"get_random_vec","evercrypt::rand_util","Generate a random byte vector of length <code>len</code>.",null,[[],["vec",3]]],[5,"get_random_array","","Generate a random array.",null,[[],[["asbyteslicemut",8],["default",8]]]],[0,"prelude","evercrypt","Prelude for Evercrypt. Include this to get access to all …",null,null],[11,"from","evercrypt::aead","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","evercrypt::digest","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","evercrypt::ecdh","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","evercrypt::ed25519","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","evercrypt::hmac","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","evercrypt::p256","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","evercrypt::signature","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","evercrypt::x25519","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"drop","evercrypt::aead","",2,[[]]],[11,"from","","",0,[[],["mode",4]]],[11,"from","evercrypt::digest","",4,[[],["mode",4]]],[11,"clone","evercrypt::aead","",0,[[],["mode",4]]],[11,"clone","evercrypt::digest","",4,[[],["mode",4]]],[11,"clone","evercrypt::ecdh","",7,[[],["mode",4]]],[11,"clone","evercrypt::hmac","",9,[[],["mode",4]]],[11,"clone","evercrypt::p256","",11,[[],["signature",3]]],[11,"clone","evercrypt::signature","",13,[[],["mode",4]]],[11,"eq","evercrypt::aead","",0,[[["mode",4]]]],[11,"eq","","",1,[[["error",4]]]],[11,"eq","evercrypt::digest","",4,[[["mode",4]]]],[11,"eq","evercrypt::ecdh","",6,[[["error",4]]]],[11,"eq","","",7,[[["mode",4]]]],[11,"eq","evercrypt::ed25519","",8,[[["error",4]]]],[11,"eq","evercrypt::hmac","",9,[[["mode",4]]]],[11,"eq","evercrypt::p256","",10,[[["error",4]]]],[11,"eq","evercrypt::signature","",12,[[["error",4]]]],[11,"eq","","",13,[[["mode",4]]]],[11,"eq","evercrypt::x25519","",14,[[["error",4]]]],[11,"fmt","evercrypt::aead","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::digest","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::ecdh","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::ed25519","",8,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::hmac","",9,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::p256","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::signature","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","evercrypt::x25519","",14,[[["formatter",3]],["result",6]]],[11,"serialize","evercrypt::aead","",0,[[],["result",4]]],[11,"serialize","evercrypt::digest","",4,[[],["result",4]]],[11,"serialize","evercrypt::ecdh","",7,[[],["result",4]]],[11,"serialize","evercrypt::hmac","",9,[[],["result",4]]],[11,"serialize","evercrypt::signature","",13,[[],["result",4]]],[11,"deserialize","evercrypt::aead","",0,[[],["result",4]]],[11,"deserialize","evercrypt::digest","",4,[[],["result",4]]],[11,"deserialize","evercrypt::ecdh","",7,[[],["result",4]]],[11,"deserialize","evercrypt::hmac","",9,[[],["result",4]]],[11,"deserialize","evercrypt::signature","",13,[[],["result",4]]]],"p":[[4,"Mode"],[4,"Error"],[3,"Aead"],[4,"Error"],[4,"Mode"],[3,"Digest"],[4,"Error"],[4,"Mode"],[4,"Error"],[4,"Mode"],[4,"Error"],[3,"Signature"],[4,"Error"],[4,"Mode"],[4,"Error"]]},\
"evercrypt_sys":{"doc":"","i":[[0,"evercrypt_bindings","evercrypt_sys","",null,null],[5,"EverCrypt_AutoConfig2_has_shaext","evercrypt_sys::evercrypt_bindings","",null,null],[5,"EverCrypt_AutoConfig2_has_aesni","","",null,null],[5,"EverCrypt_AutoConfig2_has_pclmulqdq","","",null,null],[5,"EverCrypt_AutoConfig2_has_avx2","","",null,null],[5,"EverCrypt_AutoConfig2_has_avx","","",null,null],[5,"EverCrypt_AutoConfig2_has_bmi2","","",null,null],[5,"EverCrypt_AutoConfig2_has_adx","","",null,null],[5,"EverCrypt_AutoConfig2_has_sse","","",null,null],[5,"EverCrypt_AutoConfig2_has_movbe","","",null,null],[5,"EverCrypt_AutoConfig2_has_rdrand","","",null,null],[5,"EverCrypt_AutoConfig2_has_avx512","","",null,null],[5,"EverCrypt_AutoConfig2_wants_vale","","",null,null],[5,"EverCrypt_AutoConfig2_wants_hacl","","",null,null],[5,"EverCrypt_AutoConfig2_wants_openssl","","",null,null],[5,"EverCrypt_AutoConfig2_wants_bcrypt","","",null,null],[5,"EverCrypt_AutoConfig2_recall","","",null,null],[5,"EverCrypt_AutoConfig2_init","","",null,null],[5,"EverCrypt_AutoConfig2_disable_avx2","","",null,null],[5,"EverCrypt_AutoConfig2_disable_avx","","",null,null],[5,"EverCrypt_AutoConfig2_disable_bmi2","","",null,null],[5,"EverCrypt_AutoConfig2_disable_adx","","",null,null],[5,"EverCrypt_AutoConfig2_disable_shaext","","",null,null],[5,"EverCrypt_AutoConfig2_disable_aesni","","",null,null],[5,"EverCrypt_AutoConfig2_disable_pclmulqdq","","",null,null],[5,"EverCrypt_AutoConfig2_disable_sse","","",null,null],[5,"EverCrypt_AutoConfig2_disable_movbe","","",null,null],[5,"EverCrypt_AutoConfig2_disable_rdrand","","",null,null],[5,"EverCrypt_AutoConfig2_disable_avx512","","",null,null],[5,"EverCrypt_AutoConfig2_disable_vale","","",null,null],[5,"EverCrypt_AutoConfig2_disable_hacl","","",null,null],[5,"EverCrypt_AutoConfig2_disable_openssl","","",null,null],[5,"EverCrypt_AutoConfig2_disable_bcrypt","","",null,null],[5,"EverCrypt_AEAD_uu___is_Ek","","",null,null],[5,"EverCrypt_AEAD___proj__Ek__item__impl","","",null,null],[5,"EverCrypt_AEAD___proj__Ek__item__ek","","",null,null],[5,"EverCrypt_AEAD_alg_of_state","","",null,null],[5,"EverCrypt_AEAD_create_in","","",null,null],[5,"EverCrypt_AEAD_encrypt","","",null,null],[5,"EverCrypt_AEAD_encrypt_expand_aes128_gcm","","",null,null],[5,"EverCrypt_AEAD_encrypt_expand_aes256_gcm","","",null,null],[5,"EverCrypt_AEAD_encrypt_expand_chacha20_poly1305","","",null,null],[5,"EverCrypt_AEAD_encrypt_expand","","",null,null],[5,"EverCrypt_AEAD_decrypt","","",null,null],[5,"EverCrypt_AEAD_decrypt_expand_aes128_gcm","","",null,null],[5,"EverCrypt_AEAD_decrypt_expand_aes256_gcm","","",null,null],[5,"EverCrypt_AEAD_decrypt_expand_chacha20_poly1305","","",null,null],[5,"EverCrypt_AEAD_decrypt_expand","","",null,null],[5,"EverCrypt_AEAD_free","","",null,null],[5,"EverCrypt_Curve25519_secret_to_public","","",null,null],[5,"EverCrypt_Curve25519_scalarmult","","",null,null],[5,"EverCrypt_Curve25519_ecdh","","",null,null],[5,"EverCrypt_Ed25519_sign","","",null,null],[5,"EverCrypt_Ed25519_verify","","",null,null],[5,"EverCrypt_Ed25519_secret_to_public","","",null,null],[5,"EverCrypt_Ed25519_expand_keys","","",null,null],[5,"EverCrypt_Ed25519_sign_expanded","","",null,null],[5,"EverCrypt_Hash_string_of_alg","","",null,null],[5,"EverCrypt_Hash_uu___is_MD5_s","","",null,null],[5,"EverCrypt_Hash___proj__MD5_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_SHA1_s","","",null,null],[5,"EverCrypt_Hash___proj__SHA1_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_SHA2_224_s","","",null,null],[5,"EverCrypt_Hash___proj__SHA2_224_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_SHA2_256_s","","",null,null],[5,"EverCrypt_Hash___proj__SHA2_256_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_SHA2_384_s","","",null,null],[5,"EverCrypt_Hash___proj__SHA2_384_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_SHA2_512_s","","",null,null],[5,"EverCrypt_Hash___proj__SHA2_512_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_Blake2S_s","","",null,null],[5,"EverCrypt_Hash___proj__Blake2S_s__item__p","","",null,null],[5,"EverCrypt_Hash_uu___is_Blake2B_s","","",null,null],[5,"EverCrypt_Hash___proj__Blake2B_s__item__p","","",null,null],[5,"EverCrypt_Hash_alg_of_state","","",null,null],[5,"EverCrypt_Hash_create_in","","",null,null],[5,"EverCrypt_Hash_create","","",null,null],[5,"EverCrypt_Hash_init","","",null,null],[5,"EverCrypt_Hash_update_multi_256","","",null,null],[5,"EverCrypt_Hash_update2","","",null,null],[5,"EverCrypt_Hash_update","","",null,null],[5,"EverCrypt_Hash_update_multi2","","",null,null],[5,"EverCrypt_Hash_update_multi","","",null,null],[5,"EverCrypt_Hash_update_last_256","","",null,null],[5,"EverCrypt_Hash_update_last2","","",null,null],[5,"EverCrypt_Hash_update_last","","",null,null],[5,"EverCrypt_Hash_finish","","",null,null],[5,"EverCrypt_Hash_free","","",null,null],[5,"EverCrypt_Hash_copy","","",null,null],[5,"EverCrypt_Hash_hash_256","","",null,null],[5,"EverCrypt_Hash_hash_224","","",null,null],[5,"EverCrypt_Hash_hash","","",null,null],[5,"EverCrypt_Hash_Incremental_hash_len","","",null,null],[5,"EverCrypt_Hash_Incremental_block_len","","",null,null],[5,"EverCrypt_Hash_Incremental_create_in","","",null,null],[5,"EverCrypt_Hash_Incremental_init","","",null,null],[5,"EverCrypt_Hash_Incremental_update","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_md5","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_sha1","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_sha224","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_sha256","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_sha384","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_sha512","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_blake2s","","",null,null],[5,"EverCrypt_Hash_Incremental_finish_blake2b","","",null,null],[5,"EverCrypt_Hash_Incremental_alg_of_state","","",null,null],[5,"EverCrypt_Hash_Incremental_finish","","",null,null],[5,"EverCrypt_Hash_Incremental_free","","",null,null],[5,"EverCrypt_HMAC_compute_sha1","","",null,null],[5,"EverCrypt_HMAC_compute_sha2_256","","",null,null],[5,"EverCrypt_HMAC_compute_sha2_384","","",null,null],[5,"EverCrypt_HMAC_compute_sha2_512","","",null,null],[5,"EverCrypt_HMAC_compute_blake2s","","",null,null],[5,"EverCrypt_HMAC_compute_blake2b","","",null,null],[5,"EverCrypt_HMAC_is_supported_alg","","",null,null],[5,"EverCrypt_HMAC_compute","","",null,null],[5,"EverCrypt_HKDF_expand_sha1","","",null,null],[5,"EverCrypt_HKDF_extract_sha1","","",null,null],[5,"EverCrypt_HKDF_expand_sha2_256","","",null,null],[5,"EverCrypt_HKDF_extract_sha2_256","","",null,null],[5,"EverCrypt_HKDF_expand_sha2_384","","",null,null],[5,"EverCrypt_HKDF_extract_sha2_384","","",null,null],[5,"EverCrypt_HKDF_expand_sha2_512","","",null,null],[5,"EverCrypt_HKDF_extract_sha2_512","","",null,null],[5,"EverCrypt_HKDF_expand_blake2s","","",null,null],[5,"EverCrypt_HKDF_extract_blake2s","","",null,null],[5,"EverCrypt_HKDF_expand_blake2b","","",null,null],[5,"EverCrypt_HKDF_extract_blake2b","","",null,null],[5,"EverCrypt_HKDF_expand","","",null,null],[5,"EverCrypt_HKDF_extract","","",null,null],[5,"EverCrypt_HKDF_hkdf_expand","","",null,null],[5,"EverCrypt_HKDF_hkdf_extract","","",null,null],[5,"Hacl_P256_ecdsa_sign_p256_sha2","","",null,null],[5,"Hacl_P256_ecdsa_sign_p256_sha384","","",null,null],[5,"Hacl_P256_ecdsa_sign_p256_sha512","","",null,null],[5,"Hacl_P256_ecdsa_sign_p256_without_hash","","",null,null],[5,"Hacl_P256_ecdsa_verif_p256_sha2","","",null,null],[5,"Hacl_P256_ecdsa_verif_p256_sha384","","",null,null],[5,"Hacl_P256_ecdsa_verif_p256_sha512","","",null,null],[5,"Hacl_P256_ecdsa_verif_without_hash","","",null,null],[5,"Hacl_P256_verify_q","","",null,null],[5,"Hacl_P256_decompression_not_compressed_form","","",null,null],[5,"Hacl_P256_decompression_compressed_form","","",null,null],[5,"Hacl_P256_compression_not_compressed_form","","",null,null],[5,"Hacl_P256_compression_compressed_form","","",null,null],[5,"Hacl_P256_ecp256dh_i","","",null,null],[5,"Hacl_P256_ecp256dh_r","","",null,null],[5,"Hacl_P256_is_more_than_zero_less_than_order","","",null,null],[5,"Hacl_SHA3_shake128_hacl","","",null,null],[5,"Hacl_SHA3_shake256_hacl","","",null,null],[5,"Hacl_SHA3_sha3_224","","",null,null],[5,"Hacl_SHA3_sha3_256","","",null,null],[5,"Hacl_SHA3_sha3_384","","",null,null],[5,"Hacl_SHA3_sha3_512","","",null,null],[17,"EverCrypt_Error_Success","","",null,null],[17,"EverCrypt_Error_UnsupportedAlgorithm","","",null,null],[17,"EverCrypt_Error_InvalidKey","","",null,null],[17,"EverCrypt_Error_AuthenticationFailure","","",null,null],[17,"EverCrypt_Error_InvalidIVLength","","",null,null],[17,"EverCrypt_Error_DecodeError","","",null,null],[17,"Spec_Blake2_Blake2S","","",null,null],[17,"Spec_Blake2_Blake2B","","",null,null],[17,"Spec_Hash_Definitions_SHA2_224","","",null,null],[17,"Spec_Hash_Definitions_SHA2_256","","",null,null],[17,"Spec_Hash_Definitions_SHA2_384","","",null,null],[17,"Spec_Hash_Definitions_SHA2_512","","",null,null],[17,"Spec_Hash_Definitions_SHA1","","",null,null],[17,"Spec_Hash_Definitions_MD5","","",null,null],[17,"Spec_Hash_Definitions_Blake2S","","",null,null],[17,"Spec_Hash_Definitions_Blake2B","","",null,null],[17,"Spec_ECDSA_NoHash","","",null,null],[17,"Spec_ECDSA_Hash","","",null,null],[17,"Spec_FFDHE_FFDHE2048","","",null,null],[17,"Spec_FFDHE_FFDHE3072","","",null,null],[17,"Spec_FFDHE_FFDHE4096","","",null,null],[17,"Spec_FFDHE_FFDHE6144","","",null,null],[17,"Spec_FFDHE_FFDHE8192","","",null,null],[17,"Spec_Agile_Cipher_AES128","","",null,null],[17,"Spec_Agile_Cipher_AES256","","",null,null],[17,"Spec_Agile_Cipher_CHACHA20","","",null,null],[17,"Spec_Cipher_Expansion_Hacl_CHACHA20","","",null,null],[17,"Spec_Cipher_Expansion_Vale_AES128","","",null,null],[17,"Spec_Cipher_Expansion_Vale_AES256","","",null,null],[17,"Spec_Agile_AEAD_AES128_GCM","","",null,null],[17,"Spec_Agile_AEAD_AES256_GCM","","",null,null],[17,"Spec_Agile_AEAD_CHACHA20_POLY1305","","",null,null],[17,"Spec_Agile_AEAD_AES128_CCM","","",null,null],[17,"Spec_Agile_AEAD_AES256_CCM","","",null,null],[17,"Spec_Agile_AEAD_AES128_CCM8","","",null,null],[17,"Spec_Agile_AEAD_AES256_CCM8","","",null,null],[17,"Spec_Frodo_Params_SHAKE128","","",null,null],[17,"Spec_Frodo_Params_AES128","","",null,null],[6,"__uint8_t","","",null,null],[6,"__uint32_t","","",null,null],[6,"__uint64_t","","",null,null],[6,"C_String_t","","",null,null],[6,"EverCrypt_Error_error_code","","",null,null],[6,"Spec_Hash_Definitions_hash_alg","","",null,null],[6,"Spec_Cipher_Expansion_impl","","",null,null],[6,"Spec_Agile_AEAD_alg","","",null,null],[6,"EverCrypt_Hash_state_s_tags","","",null,null],[3,"EverCrypt_Hash_state_s_s","","",null,null],[12,"tag","","",0,null],[12,"__bindgen_anon_1","","",0,null],[19,"EverCrypt_Hash_state_s_s__bindgen_ty_1","","",null,null],[12,"case_MD5_s","","",1,null],[12,"case_SHA1_s","","",1,null],[12,"case_SHA2_224_s","","",1,null],[12,"case_SHA2_256_s","","",1,null],[12,"case_SHA2_384_s","","",1,null],[12,"case_SHA2_512_s","","",1,null],[12,"case_Blake2S_s","","",1,null],[12,"case_Blake2B_s","","",1,null],[6,"EverCrypt_Hash_state_s","","",null,null],[3,"EverCrypt_AEAD_state_s","","",null,null],[3,"Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"clone","","",0,[[],["evercrypt_hash_state_s_s",3]]],[11,"clone","","",1,[[],["evercrypt_hash_state_s_s__bindgen_ty_1",19]]],[11,"clone","","",2,[[],["evercrypt_aead_state_s",3]]],[11,"clone","","",3,[[],["hacl_streaming_functor_state_s___evercrypt_hash_state_s____",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"EverCrypt_Hash_state_s_s"],[19,"EverCrypt_Hash_state_s_s__bindgen_ty_1"],[3,"EverCrypt_AEAD_state_s"],[3,"Hacl_Streaming_Functor_state_s___EverCrypt_Hash_state_s____"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);